{#- get dict of user configurations -#}
{%- set chrome = salt['pillar.get']('tool:chrome', {'users': {}}, merge=True) -%}
{%- set users = {} -%}

{# {%- import_yaml "tool-chrome/policies/files/policies.yml" as policies_default -%} #}
{%- load_yaml as extensions_default -%}
installation_mode: normal_installed
update_url: https://clients2.google.com/service/update2/crx
{%- endload -%}

{%- set extensions_default = salt['defaults.merge'](extensions_default, chromium.get('ext_defaults', {}), in_place=False) %}

{%- set policies = chrome.get('policies', {}) -%}

{%- if chrome.get('extensions') -%}
  {# parse extensions. allows to specify pre-defined extensions by name
     instead of looking up ID #}
  {%- set extensions_data = {} -%}
  {%- set local_extensions = {} -%}
  {%- for extension in chrome.extensions -%}
    {%- set extension_config = {} -%}
    {%- if extension is mapping -%}
      {%- set extension_name = extension.keys() | list | first -%}
      {#- need to deepcopy because we might pop 'local' settings, which will seem to work, but
          will make imports not contain local extension settings -#}
      {%- set extension_config = salt['defaults.deepcopy'](extension[extension_name]) -%}
    {%- else -%}
      {%- set extension_name = extension -%}
    {%- endif -%}
    {%- import_yaml "tool-chrome/policies/extensions/" + extension_name + ".yml" as data -%}
    {%- if extension_config.get('local', False) -%}
      {%- do local_extensions.update({extension_name: {'id': data.keys() | first, 'v': extension_config.local_version}}) -%}
      {%- do extension_config.update({'update_url': 'file://' ~ chrome.ext_local_source ~ '/update'}) -%}
      {%- do extension_config.update({'override_update_url': True}) -%}
      {%- do extension_config.pop('local') -%}
      {%- do extension_config.pop('local_version') -%}
    {%- endif -%}
    {%- set extension_default = salt['defaults.merge'](extensions_default, data[data.keys() | list | first], in_place=False) -%}
    {%- set extension_config = salt['defaults.merge'](extensions_default, extension_config, in_place=False) -%}
    {%- do data[data.keys() | list | first].update(extension_config) -%}
    {%- do extensions_data.update(data) -%}
  {%- endfor -%}
  {%- do chrome.update({'_local_extensions': local_extensions}) -%}
  {%- set policies = salt['defaults.merge'](policies, {'forced' if chrome.get('ext_forced') else 'recommended': {'ExtensionSettings': extensions_data}}, in_place=False) -%} {# for whatever reason, this does not work in_place #}
  {%- if local_extensions %}
    {%- do policies | append_dict_key_value('forced:ExtensionInstallSources', 'file://{}/*'.format(chrome.ext_local_source)) %}
  {%- endif %}
{%- endif -%}

{#- https://support.google.com/chrome/a/answer/7532015 -#}
{%- if policies and 'Windows' == grains['kernel'] %}
  {%- if policies | traverse("recommended:ExtensionSettings") %}
    {%- do policies.recommended.update({'ExtensionSettings': policies.recommended.ExtensionSettings | json}) %}
  {%- endif %}
  {%- if policies | traverse("forced:ExtensionSettings") %}
    {%- do policies.forced.update({'ExtensionSettings': policies.forced.ExtensionSettings | json}) %}
  {%- endif %}
{%- endif %}

{%- do chrome.update({'_policies': policies}) -%}

{#- rejectattr filter does not fit with mapping. need to filter out users before merging default values -#}
{%- for tool_user, tool_user_conf in salt['pillar.get']('tool:users', {}).items() -%}
{#- by default, install tool if it was targeted. explicitly deny for a specific user to override -#}
  {%- if tool_user_conf.get('chrome', True) -%}
    {%- do users.update({tool_user: tool_user_conf}) -%}
  {%- endif -%}
{%- endfor -%}

{%- do salt['defaults.merge'](users, chrome.get('users', {})) -%}

{#- update all user configuration for chrome with its defaults -#}
{%- do salt['defaults.update'](users, {'chrome': chrome.get('defaults', {})}) -%}

{#- embed user information that will be reused (home, primary group, shell, paths) -#}
{%- for user in users.keys() -%}
  {%- do users[user].update({'_chrome': {}}) -%}
  {%- do users[user].update({'name': user}) -%}
  {%- set user_info = salt['user.info'](user) -%}
  {%- load_yaml as user_info -%}
group: {{ salt['user.primary_group'](user) }}
home: {{ user_info.home }}
shell: {{ user_info.shell.split('/')[-1] }}
  {%- endload -%}
  {%- do users[user].update(salt['defaults.merge'](user_info, users[user], in_place=False)) -%}
{%- endfor -%}

{%- do chrome.update({'users': users.values() | list}) -%}
